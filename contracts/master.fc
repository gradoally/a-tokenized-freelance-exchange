#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/messages.fc";
#include "imports/test-libs/message_helpers.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";
#include "imports/params.fc";
#include "master/storage.fc";
#include "master/root-calls.fc";
#include "master/admin-calls.fc";
#include "master/user-calls.fc";
  ;; storage::collections:
  ;; 0 -> Admin Collection
  ;; 1 -> User Collection
  ;; 2 -> Order Collection

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_bits() < 96) { 
    return (); 
  }

  slice cs = in_msg_full.begin_parse();

  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  if (flags & 1) { 
    return (); 
  }

  load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::create_user) {
    deploy_sbt(1, query_id, in_msg_body~load_uint(64), in_msg_body~load_coins(), in_msg_body~load_ref());
    return ();
  }

  if (op == op::create_order) {
    deploy_order(2, query_id, in_msg_body~load_uint(64), in_msg_body~load_coins(), in_msg_body~load_ref());
    return ();
  }

  if (op == op::init_arbitration) {
    int id = in_msg_body~load_uint(64);

    throw_unless(66, equal_slices(sender_address, return_collection_addr_by_id(2).calculate_item_address(return_item_code_by_id(2), 0, id)));

    messages::send_simple(0, return_collection_addr_by_id(1), begin_cell().store_uint(op::process_arbitration, 32)
                                                                .store_uint(query_id, 64).store_uint(id, 64).end_cell(), CARRY_REMAINING_GAS);

    ;; TO DO: implement arbitration process

    return ();
  }

  if (op == op::ownership_proof) {
    int id = in_msg_body~load_uint(256);

    if (equal_slices(sender_address, return_collection_addr_by_id(0).calculate_item_address(return_item_code_by_id(0), 0, id))) {
      handle_admin_messages(query_id, balance, msg_value, in_msg_body);
    }

    if (equal_slices(sender_address, return_collection_addr_by_id(1).calculate_item_address(return_item_code_by_id(1), 0, id))) {
      handle_user_messages(query_id, balance, msg_value, in_msg_body);
    }

    return ();
  }

  if (equal_slices(sender_address, storage::root_address)) {
    handle_root_messages(op, query_id, balance, msg_value, in_msg_body);
    return ();
  }

  throw(0xffff);
}

(slice, int, cell) get_master_data() method_id {
  load_data();
  return (storage::root_address, storage::next_collection_index, storage::collections);
}

slice get_collection_address_by_id(int id) method_id {
  return return_collection_addr_by_id(id);
}
