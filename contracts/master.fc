#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/messages.fc";
#include "imports/test-libs/message_helpers.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";
#include "imports/params.fc";
#include "master/storage.fc";
#include "master/admin-calls.fc";
#include "master/utils.fc";

() deploy_collection (cell collection_code, cell collection_data) impure inline {
  load_data();
  cell state_init = (generate_init_state_with_data_no_library(collection_code, collection_data)).end_cell();
  slice collection_address = calculate_collection_address(state_init);

  messages::send_with_stateinit(0, collection_address, state_init, (begin_cell().end_cell()), CARRY_REMAINING_GAS);

  storage::collections~udict_set(8, storage::next_collection_index, collection_address);
  storage::next_collection_index += 1;
  save_data();
}

() deploy_item (int collection_id, int query_id, int item_index, int amount, cell nft_content) impure inline {
  slice collection_address = return_collection_addr_by_id(collection_id);
  cell msg = begin_cell()
        .store_uint(op::deploy_nft_item, 32)
        .store_uint(query_id, 64)
        .store_uint(item_index, 64)
        .store_coins(amount)
        .store_ref(nft_content)
      .end_cell();

  messages::send_simple(0, collection_address, msg, CARRY_REMAINING_GAS);
}

() edit_item_content (slice item_address, int query_id, cell content) impure inline {
  cell msg = begin_cell()
        .store_uint(op::edit_content, 32)
        .store_uint(query_id, 64)
        .store_dict(content)
      .end_cell();
  
  messages::send_simple(0, item_address, msg, CARRY_REMAINING_GAS);
}

() destroy_sbt_item (slice item_address, int query_id) impure inline {
  cell msg = begin_cell()
        .store_uint(op::destroy, 32)
        .store_uint(query_id, 64)
      .end_cell();

  messages::send_simple(0, item_address, msg, CARRY_REMAINING_GAS);
}

() revoke_sbt_item (slice item_address, int query_id) impure inline {
  cell msg = begin_cell()
        .store_uint(op::revoke, 32)
        .store_uint(query_id, 64)
      .end_cell();

  messages::send_simple(0, item_address, msg, CARRY_REMAINING_GAS);
}

() transfer_item (slice item_address, int query_id, slice new_owner_address, slice resp_address, int fwd_amount) impure inline {
  cell msg = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(query_id, 64)
        .store_slice(new_owner_address)
        .store_slice(resp_address)
        .store_uint(0, 1)
        .store_coins(fwd_amount)
      .end_cell();

  messages::send_simple(0, item_address, msg, CARRY_REMAINING_GAS);
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_bits() < 96) { 
    return (); 
  }

  slice cs = in_msg_full.begin_parse();

  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  if (flags & 1) { 
    return (); 
  }

  load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::deploy_nft_item) {
    deploy_item(in_msg_body~load_uint(8), query_id, in_msg_body~load_uint(64), in_msg_body~load_coins(), in_msg_body~load_ref());
    return ();
  }

  if (op == op::edit_item_content) {
    edit_item_content(in_msg_body~load_msg_addr(), query_id, in_msg_body~load_ref());
    return ();
  }

  if (op == op::destroy_sbt_item) {
    destroy_sbt_item(in_msg_body~load_msg_addr(), query_id);
    return ();
  }

  if (op == op::transfer_item) {
    transfer_item(in_msg_body~load_msg_addr(), query_id, in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), in_msg_body~load_coins());
    return ();
  }

  if (equal_slices(sender_address, storage::admin_address)) {
    handle_admin_messages(op, query_id, balance, msg_value, in_msg_body);
    return ();
  }

  throw(0xffff);
}

(slice, int, cell) get_master_data() method_id {
  load_data();
  return (storage::admin_address, storage::next_collection_index, storage::collections);
}

