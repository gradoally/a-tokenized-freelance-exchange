#pragma version >=0.4.0;

#include "imports/stdlib.fc";
#include "imports/messages.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "user/item-storage.fc";
#include "user/order-utils.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {

    var msg = begin_cell()
        .store_uint(flag, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();
    
    (int init?, int index, slice collection_address, slice owner_address, cell content, slice authority_address, int revoked_at) = load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));

        store_data(index, collection_address, in_msg_body~load_msg_addr(), in_msg_body~load_ref(), in_msg_body~load_msg_addr(), 0); 

        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof) {
            send_msg(0x10, owner_address, 0, op::ownership_proof_bounced, query_id, null(), CARRY_REMAINING_GAS);
        }
        return ();
    }

    if (op == op::request_owner) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                .store_uint(index, 256)
                .store_slice(sender_address)
                .store_slice(owner_address)
                .store_ref(body)
                .store_uint(revoked_at, 64)
                .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        send_msg(0x10, dest, 0, op::owner_info, query_id, msg, CARRY_REMAINING_GAS);
        return ();
    }
    if (op == op::prove_ownership) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                .store_uint(index, 256)
                .store_slice(owner_address)
                .store_ref(body)
                .store_uint(revoked_at, 64)
                .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        send_msg(0x10, dest, 0, op::ownership_proof, query_id, msg, CARRY_REMAINING_GAS);
        return ();
    }
    if (op == op::get_static_data) {
        var msg = begin_cell().store_uint(index, 256).store_slice(collection_address);

        send_msg(0x10, sender_address, 0, op::report_static_data, query_id, msg, CARRY_REMAINING_GAS);
        return ();
    }
    if (op == op::destroy) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        send_msg(0x10, sender_address, 0, op::excesses, query_id, null(), CARRY_ALL_BALANCE);

        owner_address = null_addr();
        authority_address = null_addr();
        
        store_data(index, collection_address, owner_address, content, authority_address, revoked_at);
        return ();
    }
    if (op == op::revoke) {
        throw_unless(401, equal_slices(authority_address, sender_address));
        throw_unless(403, revoked_at == 0);

        revoked_at = now();
        store_data(index, collection_address, owner_address, content, authority_address, revoked_at);
        return ();
    }
    if (op == op::take_excess) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        raw_reserve(min_tons_for_storage(), 0);

        send_msg(0x10, sender_address, 0, op::excesses, query_id, null(), CARRY_ALL_BALANCE);
        return ();
    }
    if (op == op::edit_content) { ;; owner can change content and dns records
        throw_unless(410, equal_slices(sender_address, owner_address));
        store_data(index, collection_address, owner_address, in_msg_body~load_ref(), authority_address, revoked_at);
        return ();
    }

    if (op == op::transfer) {
        throw(413);
    }

    if (op == op::process_order) {

        slice order_nft_address = in_msg_body~load_msg_addr();
        int op_order = in_msg_body~load_uint(32);


        cell msg = begin_cell().store_uint(op::is_customer?).end_cell()
        messages::send_simple(0, sender_address, msg, 64);

    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content, _, _) = load_data();
    return (init?, index, collection_address, owner_address, content);
}

slice get_authority_address() method_id {
    (_, _, _, _, _, slice authority_address, _) = load_data();
    return authority_address;
}

int get_revoked_time() method_id {
    (_, _, _, _, _, _, int revoked_at) = load_data();
    return revoked_at;
}
