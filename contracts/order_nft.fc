#pragma version >=0.2.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "order/master-calls.fc";
#include "order/item-storage.fc";
#include "order/get-methods.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {

    var msg = begin_cell()
    .store_uint(flag, 6)
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }
    
    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, slice owner_address, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {

    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
        send_msg(0x10, new_owner_address, forward_amount, op::ownership_assigned,
            query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(0x10, response_destination, rest_amount, op::excesses, query_id, null(), 1); ;; paying fees, revert on errors
    }

    storage::owner_address = new_owner_address;
    store_data();
}

() transfer_editorship(int my_balance, slice editor_address, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {

    throw_unless(401, equal_slices(sender_address, editor_address));

    slice new_editor_address = in_msg_body~load_msg_addr();
    force_chain(new_editor_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1);
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0;
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0);

    if (forward_amount) {
        send_msg(0x10, new_editor_address, forward_amount, op::editorship_assigned,
            query_id, begin_cell().store_slice(editor_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(0x10, response_destination, rest_amount, op::excesses, query_id, null(), 1);
    }

    storage::editor_address = new_editor_address;
    store_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();

    int fwd_fee = muldiv(cs~load_coins(), 3, 2);

    load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(storage::collection_address, sender_address));

        storage::owner_address = in_msg_body~load_msg_addr();
        storage::content = in_msg_body~load_ref();
        storage::editor_address = in_msg_body~load_msg_addr();

        store_data();
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::get_static_data) {
        var msg = begin_cell().store_uint(storage::index, 256).store_slice(storage::collection_address);

        send_msg(0x10, sender_address, 0, op::report_static_data, query_id, msg, 64);
        return ();
    }



    if (op == init_arbitration) {
        
        throw_unless(777, is_customer?());
        throw_unless(333, check_order_status() == )

    }

    if (op == op::transfer_editorship) {
        transfer_editorship(my_balance, storage::editor_address, sender_address, query_id, in_msg_body, fwd_fee);
        return ();
    }

    if (op == op::transfer) {
        transfer_ownership(my_balance, storage::owner_address, sender_address, query_id, in_msg_body, fwd_fee);
        return ();
    }

    if (equal_slices(storage::editor_address, sender_address)) {
        handle_master_messages(op, query_id, my_balance, msg_value, in_msg_body);
        return ();
    }
    throw(0xffff);
}
