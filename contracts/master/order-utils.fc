#include "common-utils.fc";

() deploy_order(int collection_id, int query_id, int item_index, int amount, cell nft_content) impure inline {
  slice cs = nft_content.begin_parse();
  throw_unless(66, equal_slices(my_address(), cs~load_msg_addr()));
  cs~load_ref();
  throw_unless(67, equal_slices(my_address(), cs~load_msg_addr()));
  
  slice collection_address = return_collection_addr_by_id(collection_id);
  cell msg = begin_cell()
        .store_uint(op::deploy_nft_item, 32)
        .store_uint(query_id, 64)
        .store_uint(item_index, 64)
        .store_coins(amount)
        .store_ref(nft_content)
      .end_cell();

  messages::send_simple(0, collection_address, msg, CARRY_REMAINING_GAS);
}

() transfer_order(slice item_address, int query_id, slice new_owner_address, slice resp_address, int fwd_amount) impure inline {
  cell msg = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(query_id, 64)
        .store_slice(new_owner_address)
        .store_slice(resp_address)
        .store_uint(0, 1)
        .store_coins(fwd_amount)
      .end_cell();

  messages::send_simple(0, item_address, msg, CARRY_REMAINING_GAS);
}

slice calculate_item_address(slice collection_addr, cell item_code, int wc, int index) inline {
  cell data = begin_cell().store_uint(index, 64).store_slice(collection_addr).end_cell();
  cell state_init = begin_cell().store_uint(0, 2).store_dict(item_code).store_dict(data).store_uint(0, 1).end_cell();

  return begin_cell()
    .store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}
